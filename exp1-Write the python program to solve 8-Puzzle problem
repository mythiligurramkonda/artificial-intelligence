import heapq
goal = ((1,2,3),(4,5,6),(7,8,0))
dirs = [(-1,0),(1,0),(0,-1),(0,1)]
def manhattan(s):
    return sum(abs((v-1)//3 - i) + abs((v-1)%3 - j)
               for i,r in enumerate(s) for j,v in enumerate(r) if v)
def move(s, dx, dy):
    s = [list(r) for r in s]
    for i in range(3):
        for j in range(3):
            if s[i][j] == 0:
                ni, nj = i + dx, j + dy
                if 0 <= ni < 3 and 0 <= nj < 3:
                    s[i][j], s[ni][nj] = s[ni][nj], s[i][j]
                    return tuple(map(tuple, s))
def a_star(start):
    pq, seen = [(manhattan(start), 0, start, [])], set()
    while pq:
        _, g, s, path = heapq.heappop(pq)
        if s == goal: return path + [s]
        if s in seen: continue
        seen.add(s)
        for dx, dy in dirs:
            ns = move(s, dx, dy)
            if ns and ns not in seen:
                heapq.heappush(pq, (g+1+manhattan(ns), g+1, ns, path + [s]))
def show(sol):
    for s in sol: print(*s, sep="\n"); print()
start = ((1,2,3),(4,0,6),(7,5,8))
res = a_star(start)
print("Solution:" if res else "No solution found.")
if res: show(res)
