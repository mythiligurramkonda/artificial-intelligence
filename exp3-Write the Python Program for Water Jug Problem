from collections import deque
def water_jug_problem(x, y, z):
    queue = deque([(0, 0, [])]) # Start with both jugs empty
    visited = set()
    while queue:
        a, b, steps = queue.popleft()
        if (a, b) in visited:
            continue
        visited.add((a, b))
        if a == z or b == z:
            return steps + [f"Result: Jug1 = {a}L, Jug2 = {b}L"]
        # Fill jug 1 2
        queue.append((x, b, steps + ['Fill Jug 1']))
        queue.append((a, y, steps + ['Fill Jug 2']))
        # Empty jug 1 2
        queue.append((0, b, steps + ['Empty Jug 1']))
        queue.append((a, 0, steps + ['Empty Jug 2']))
        # Pour jug 1 into jug 2
        amount = min(a, y - b)
        queue.append((a - amount, b + amount, steps + ['Pour Jug 1 -> Jug 2']))
        # Pour jug 2 into jug 1
        amount = min(b, x - a)
        queue.append((a + amount, b - amount, steps + ['Pour Jug 2 -> Jug 1']))
    return None
steps = water_jug_problem(4, 3, 2)
if steps:
    print("Steps to reach the goal:")
    print('\n'.join(steps))
else:
    print('No solution found.')
